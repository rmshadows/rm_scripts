#### nginx配置
# nginx用户
user www-data
# 工作核心数量
worker_processes auto
# 指定nginx进程运行文件存放地址
pid /run/nginx.pid
# 包含启用的模块
include /etc/nginx/modules-enabled/*.conf #

# Specifies the value for maximum file descriptors that can be opened by this process.# nginx worker进程最大打开文件数
worker_rlimit_nofile 4028

events {
    # 在linux下，nginx使用epoll的IO多路复用模型
    use epoll
    # nginx worker单个进程允许的客户端最大连接数
    worker_connections 1024
    # 设置网路连接序列化，防止惊群现象发生，默认为on.惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。
    accept_mutex on
    # 设置一个进程是否同时接受多个网络连接，默认为off。如果web服务器面对的是一个持续的请求流，那么启用multi_accept可能会造成worker进程一次接受的请求大于worker_connections指定可以接受的请求数。这就是overflow，这个overflow会造成性能损失，overflow这部分的请求不会受到处理。
    # multi_accept on;
}

http {
    # IP黑名单
    include block_ip.conf
    include /etc/nginx/mime.types
    default_type application/octet-stream

    # charset gb2312;
    charset utf-8

    # limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s

    server_names_hash_bucket_size 128
    # server_name_in_redirect off;
    client_header_buffer_size 32k
    large_client_header_buffers 4 32k
    # 允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值
    client_max_body_size 5000m

    types_hash_max_size 2048
    # 禁用服务器版本显示
    server_tokens off
    sendfile on
    # 只有sendfile开启模式下有效
    tcp_nopush on
    # 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。
    keepalive_timeout 60
    # 设置客户端连接保持会话的超时时间，超过这个时间，服务器会关闭该连接。
    tcp_nodelay on
    fastcgi_connect_timeout 300
    fastcgi_send_timeout 300
    fastcgi_read_timeout 300
    fastcgi_buffers 8 128k
    fastcgi_buffer_size 128k
    fastcgi_busy_buffers_size 128k
    fastcgi_temp_file_write_size 128k

    #limit_zone crawler $binary_remote_addr 10m;

    ##
    # SSL Settings
    ##
    # ssl_protocols TLSv1.2 TLSv1.3;# Dropping SSLv3, ref: POODLE
    # ssl_prefer_server_ciphers on;
    ##
    # Logging Settings
    ##
    # access_log /var/log/nginx/access.log
    # error_log /var/log/nginx/error.log
    access_log /home/【$CURRENT_USER】/Logs/nginx/access.log;
    # 制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg
    # error_log /home/【$CURRENT_USER】/Logs/nginx/error.log crit;
    error_log /home/【$CURRENT_USER】/Logs/nginx/info.log info;

    # log_format main  '$remote_addr - $remote_user [$time_local] "$request" '
    #            '$status $body_bytes_sent "$http_referer" '
    #            '"$http_user_agent" $http_x_forwarded_for';

    ##
    # Gzip Settings
    ##
    gzip on
    gzip_min_length 1k
    gzip_buffers 4 16k
    gzip_http_version 1.0
    gzip_comp_level 2
    gzip_types text/plain application/x-javascript text/css application/xml
    gzip_vary on
    # Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含"Via"的 header头。
    # gzip_proxied any;

    ##
    # Virtual Host Configs
    ##
    include /etc/nginx/conf.d/*.conf
    include /etc/nginx/sites-enabled/*

    ##
    # http_proxy 设置
    ##
    #支持客户端的请求方法。post/get；
    # proxy_method post;
    # client_max_body_size   10m;
    client_body_buffer_size 128k
    # nginx跟后端服务器连接超时时间(代理连接超时)
    proxy_connect_timeout 75
    proxy_send_timeout 75
    # 连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)
    proxy_read_timeout 75
    # 设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点
    proxy_buffer_size 4k
    # proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的话，这样设置
    proxy_buffers 4 32k
    # 高负荷下缓冲大小（proxy_buffers*2）
    proxy_busy_buffers_size 64k
    # 当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。
    # proxy_temp_file_write_size  64k;
    # proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;
    proxy_hide_header X-Powered-By
    proxy_hide_header Server

    ##
    # 设定负载均衡后台服务器列表
    ##
    ## down，表示当前的server暂时不参与负载均衡。
    ## backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。
    # upstream mysvr {
    # server 192.168.10.100:8080 max_fails=2 fail_timeout=30s;
    # server 192.168.10.101:8080 max_fails=2 fail_timeout=30s;
    # keepalive 16;
    # }

    # 如果需要代理动态后端或域名解析的服务，可以设置 resolver，以防止解析超时：
    # resolver 8.8.8.8 valid=300s
    # resolver_timeout 5s
}

#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
#
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
