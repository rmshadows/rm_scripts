##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

server {
    # 监听端口
    listen 80 default_server;
    listen [::]:80 default_server;
    # 域名
    server_name 【$SET_SERVER_NAME】;

    # Add index.php to the list if you are using PHP
    index index.html index.php index.htm index.nginx-debian.html;
    # 站点根目录
    root 【$SET_HTTP_SERVER_ROOT】;

    # 日志
    access_log 【$HOME_INDEX】/Logs/nginx/http.log;
    error_log 【$HOME_INDEX】/Logs/nginx/http_error.log;
    # 错误跳转页面, error_page 可调整为更友好的自定义页面或跳转到默认首页，而不是返回空白。
    error_page 403 404 502 503 504 /404.html;
    # error_page 500 502 503 504 /50x.html;
    # location = /404.html {
    #     root 【$SET_HTTP_SERVER_ROOT】;
    # }
    # location = /50x.html {
    #     root 【$SET_HTTP_SERVER_ROOT】;
    # }

    # 不是GET POST HEAD就返回空响应(一些情况可能需要注释掉)
    if ($request_method !~ ^(GET|HEAD|POST)$) {
        return 444;
    }

    # 主页
    location / {
        access_log 【$HOME_INDEX】/Logs/nginx/http.log;
        error_log 【$HOME_INDEX】/Logs/nginx/http_error.log;
        proxy_pass http://127.0.0.1:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        expires 1d;
    }

    # 用户分享的文件
    location /nres {
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime off;
    }
    # 加密的目录
    location /res {
        autoindex on;
        # 突发请求不超过10个
        limit_req zone=one burst=10;
        auth_basic "Passwd required"; #提示信息(自定义)
        auth_basic_user_file 【$HOME_INDEX】/nginx_res_login; #生成的密码文件
    }

    # php设置
    location ~ \.php$ {
        include fastcgi_params;
        # fastcgi_pass 127.0.0.1:9000; #　或者unix:/run/php/php7.4-fpm.sock;
        fastcgi_pass unix:/run/php/php【$phpfpmVersion】-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        # 可选：限制特定路径的 PHP 文件处理
        # root /var/www/specific-site;
    }
    # 拒绝对 PHP 以外的动态脚本处理请求
    location ~ \.(php|php5|py|pl|cgi|sh)$ {
        return 403;
    }

    # 静态文件
    # 当前对静态文件的匹配规则中，使用了 .*\.(gif|jpg|...)，这种正则表达式会带来性能损耗，建议改用更高效的 location 块：
    # location ~* \.(?:gif|jpg|jpeg|png|bmp|swf|ico|js|css)$ {
    #     expires max;
    #     access_log off;
    # }
    # 图片过期
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$ {
        expires 30d;
        # access_log off;
    }
    # js css文件过期
    location ~ .*\.(js|css)?$ {
        expires 15d;
        # access_log off;
    }

    # preset
    # location /preset/ {
    #     access_log 【$HOME_INDEX】/Logs/nginx/preset.log;
    #     error_log 【$HOME_INDEX】/Logs/nginx/preset_error.log;
    #     proxy_pass http://127.0.0.1:8001/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     expires 1d;
    # }

    # 若站点需要保护某些资源，可使用 IP 访问控制，限制到特定用户。
    # location /admin/ {
    #     allow 192.168.1.0/24;
    #     deny all;
    # }
    # 负载均衡
    # location  ~*^.+$ {
    #    proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表
    # }
    # SSL configuration
    #
    # listen 443 ssl default_server;
    # listen [::]:443 ssl default_server;
    #
    # Note: You should disable gzip for SSL traffic.
    # See: https://bugs.debian.org/773332
    #
    # Read up on ssl_ciphers to ensure a secure configuration.
    # See: https://bugs.debian.org/765782
    # Self signed certs generated by the ssl-cert package
    # Don't use them in a production server!
    # preset资源文件
    # location /share/ {
    #     root 【$SET_HTTP_SERVER_ROOT】/preset;
    #     # rewrite ^/www/(.*)$ /preset/share/$1;
    #     # autoindex on;
    # }
    # 其他配置
    # include snippets/snakeoil.conf;
    # pass PHP scripts to FastCGI server
    # PHP配置 (原来的模板)
    # location ~ \.php$ {
    #	include snippets/fastcgi-php.conf;
    #
    #	# With php-fpm (or other unix sockets):
    #	fastcgi_pass unix:/run/php/php7.4-fpm.sock;
    #	# With php-cgi (or other tcp sockets):
    #	fastcgi_pass 127.0.0.1:9000;
    # }
    # location / {
    #	# First attempt to serve request as file, then
    #	# as directory, then fall back to displaying a 404.
    #	try_files $uri $uri/ =404;
    # }
    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    # location ~ /\.ht {
    #	deny all;
    # }
    # 主页
    server {
        listen 8000; #监听端口
        server_name 【$SET_SERVER_NAME】; #域名
        index index.html index.htm index.php;
        root 【$SET_HTTP_SERVER_ROOT】/home_page; #站点目录
        access_log 【$HOME_INDEX】/Logs/nginx/home.log;
        error_log 【$HOME_INDEX】/Logs/nginx/home_error.log;
        error_page 301 302 403 404 502 https://【$SET_SERVER_NAME】/404.html; #错误页

        # 不是GET POST HEAD就返回空响应
        if ($request_method !~ ^(GET|HEAD|POST)$) {
            return 444;
        }

        location ~* ^/sample.html {
            return 301 /404.html;
        }

        location ~* \.(ini|php|cfg|sh|py|conf)$ {
            return 301 /404.html;
            deny all;
        }

        # 根目录下的部分文件夹全为404
        location ~* ^/(.git) {
            return 301 /404.html;
        }
    }
}

# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
# server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}

# preset
# server {
#   listen 8001;#监听端口
#   server_name 【$SET_SERVER_NAME】;#域名
#   index index.html index.htm index.php;
#   root 【$HOME_INDEX】/nginx/preset;#站点目录
#   error_page 301 302 502 403 404 https://【$SET_SERVER_NAME】/404.html; #错误页
#   # 不是GET POST HEAD就返回空响应
#   if ($request_method !~ ^(GET|HEAD|POST)$) {
#     return 444;
#   }
#   location ~ ^/(.git) {
#     return 301 /404.html;
#   }
# }