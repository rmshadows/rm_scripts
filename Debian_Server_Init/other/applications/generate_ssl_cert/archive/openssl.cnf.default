#
# OpenSSL 示例配置文件。
# 主要用于生成证书请求。
#

# 请注意，你可以使用 .include 指令从主配置文件中包含其他文件。
#.include filename

# 该定义可以防止以下行在 HOME 未定义时出现问题。
HOME			= .

# 额外的对象标识符（OID）信息：
#oid_file		= $ENV::HOME/.oid
oid_section		= new_oids

# 要使用该配置文件与 "-extfile" 选项一起使用时，
# 在此指定包含 X.509v3 扩展的部分：
# extensions		=
# （或者，使用一个只包含 X.509v3 扩展的配置文件）

[ new_oids ]

# 我们可以在此添加新的 OID，供 'ca'、'req' 和 'ts' 使用。
# 可以像这样添加一个简单的 OID：
# testoid1=1.2.3.4
# 或者使用配置文件替代，如下所示：
# testoid2=${testoid1}.5.6

# TSA 示例使用的策略。
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7

####################################################################
[ ca ]
default_ca	= CA_default		# 默认的 ca 部分

####################################################################
[ CA_default ]

dir		= ./demoCA		# 存储所有文件的目录
certs		= $dir/certs		# 存储已签发证书的目录
crl_dir		= $dir/crl		# 存储已签发 CRL（证书撤销列表）的目录
database	= $dir/index.txt	# 数据库索引文件
#unique_subject	= no			# 设置为 'no' 以允许创建具有相同主题的多个证书
new_certs_dir	= $dir/newcerts		# 默认的新证书存储目录

certificate	= $dir/cacert.pem 	# CA 证书
serial		= $dir/serial 		# 当前的序列号
crlnumber	= $dir/crlnumber	# 当前的 CRL 序号
					# 必须注释掉此行才能保留 V1 CRL
crl		= $dir/crl.pem 		# 当前的 CRL
private_key	= $dir/private/cakey.pem# CA 私钥

x509_extensions	= usr_cert		# 添加到证书的扩展

# 注释掉以下两行以使用“传统”的（且非常破坏的）格式。
name_opt 	= ca_default		# 主体名称选项
cert_opt 	= ca_default		# 证书字段选项

# 扩展复制选项：请谨慎使用。
# copy_extensions = copy

# 要添加到 CRL 的扩展。注意：Netscape Communicator 在处理 V2 CRL 时会出现问题
# 所以默认注释掉以保留 V1 CRL。
# crlnumber 也必须注释掉才能保留 V1 CRL。
# crl_extensions	= crl_ext

default_days	= 365			# 证书的有效期
default_crl_days= 30			# 下一个 CRL 的有效期
default_md	= default		# 使用公钥默认的哈希算法
preserve	= no			# 保留传入的 DN（区分名称）顺序

# 有几种不同的方式指定请求的相似性。
# 对于类型 CA，列出的属性必须相同，选项字段是可选的。
policy		= policy_match

# 对于 CA 策略
[ policy_match ]
countryName		= match
stateOrProvinceName	= match
organizationName	= match
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

# 对于“任何”策略
# 目前，必须列出所有接受的 'object' 类型。
[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

####################################################################
[ req ]
default_bits		= 2048
default_keyfile 	= privkey.pem
distinguished_name	= req_distinguished_name
attributes		= req_attributes
x509_extensions	= v3_ca	# 添加到自签名证书的扩展

# 如果私钥没有密码，则会提示输入密码
# input_password = secret
# output_password = secret

# 设置允许的字符串类型掩码。有几种选项。
# 默认：PrintableString, T61String, BMPString。
# pkix	 : PrintableString, BMPString（PKIX 在 2004 年之前的推荐）
# utf8only: 仅允许 UTF8String（PKIX 在 2004 年之后的推荐）。
# nombstr : PrintableString, T61String（不允许 BMPStrings 或 UTF8Strings）。
# MASK:XXXX 一个字面值掩码。
# 警告：古老版本的 Netscape 会崩溃在 BMPStrings 或 UTF8Strings 上。
string_mask = utf8only

# req_extensions = v3_req # 添加到证书请求的扩展

[ req_distinguished_name ]
countryName			= 国家名称（2 位字母代码）
countryName_default		= AU
countryName_min			= 2
countryName_max			= 2

stateOrProvinceName		= 省/州名称（全称）
stateOrProvinceName_default	= Some-State

localityName			= 市区名称（例如：城市）

0.organizationName		= 组织名称（例如：公司）
0.organizationName_default	= Internet Widgits Pty Ltd

# 我们可以这样做，但通常不需要 :-)
#1.organizationName		= 第二个组织名称（例如：公司）
#1.organizationName_default	= World Wide Web Pty Ltd

organizationalUnitName		= 组织单位名称（例如：部门）
#organizationalUnitName_default	=

commonName			= 公共名称（例如：服务器 FQDN 或您的名称）
commonName_max			= 64

emailAddress			= 电子邮件地址
emailAddress_max		= 64

# SET-ex3			= SET 扩展号 3

[ req_attributes ]
challengePassword		= 挑战密码
challengePassword_min		= 4
challengePassword_max		= 20

unstructuredName		= 可选的公司名称

[ usr_cert ]

# 当 'ca' 签署请求时添加这些扩展。

# 这与 PKIX 指南相悖，但一些 CA 和软件要求这样做，
# 以防止将最终用户证书误解为 CA 证书。

basicConstraints=CA:FALSE

# 这是 nsCertType 的一些示例。如果省略此项，
# 证书将不能用于任何对象签名。

# 这是 SSL 服务器的常见类型。
# nsCertType			= server

# 对于对象签名证书，应该使用这个。
# nsCertType = objsign

# 对于正常的客户端使用，通常使用这个
# nsCertType = client, email

# 适用于所有情况，包括对象签名：
# nsCertType = client, email, objsign

# 这是客户端证书中的典型密钥使用方式。
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# 这将在 Netscape 的评论列表框中显示。
nsComment			= "OpenSSL 生成的证书"

# 包含 PKIX 推荐内容对所有证书无害。
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer

# 这是 subjectAltName 和 issuerAltName。
# 导入电子邮件地址。
# subjectAltName=email:copy
# 这是生成符合 PKIX 标准的证书的替代方法。
# subjectAltName=email:move

# 复制主体详细信息
# issuerAltName=issuer:copy

#nsCaRevocationUrl		= http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

# 这是 TSA 证书需要的。
# extendedKeyUsage = critical,timeStamping

[ v3_req ]

# 添加到证书请求的扩展

basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]

# 典型 CA 的扩展

# PKIX 推荐。

subjectKeyIdentifier=hash

authorityKeyIdentifier=keyid:always,issuer

basicConstraints = critical,CA:true

# 密钥使用：这是典型的 CA 证书。由于它将阻止将其用作测试自签名证书，
# 最好默认不加此项。
# keyUsage = cRLSign, keyCertSign

# 一些人可能还想加上这个
# nsCertType = sslCA, emailCA

# 包括电子邮件地址在 subject alt name 中：另一个 PKIX 推荐
# subjectAltName=email:copy
# 复制签发人详细信息
# issuerAltName=issuer:copy

# DER 十六进制编码的扩展：只有专家才能使用！
# obj=DER:02:03
# 其中 'obj' 是标准或添加的对象
# 你甚至可以覆盖支持的扩展：
# basicConstraints= critical, DER:30:03:01:01:FF

[ crl_ext ]

# CRL 扩展。
# 只有 issuerAltName 和 authorityKeyIdentifier 在 CRL 中才有意义。

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always

[ proxy_cert_ext ]
# 创建代理证书时应添加的扩展

# 这与 PKIX 指南相悖，但一些 CA 和软件要求这样做，
# 以防止将最终用户证书误解为 CA 证书。

basicConstraints=CA:FALSE

# 这里是 nsCertType 的一些示例。如果省略此项，
# 证书将不能用于任何对象签名。

# 这是 SSL 服务器的常见类型。
# nsCertType			= server

# 对于对象签名证书，应该使用这个。
# nsCertType = objsign

# 对于正常的客户端使用，通常使用这个
# nsCertType = client, email

# 适用于所有情况，包括对象签名：
# nsCertType = client, email, objsign

# 这是客户端证书中的典型密钥使用方式。
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# 这将在 Netscape 的评论列表框中显示。
nsComment			= "OpenSSL 生成的证书"

# 包含 PKIX 推荐内容对所有证书无害。
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer

# 这是 subjectAltName 和 issuerAltName。
# 导入电子邮件地址。
# subjectAltName=email:copy
# 这是生成符合 PKIX 标准的证书的替代方法。
# subjectAltName=email:move

# 复制主体详细信息
# issuerAltName=issuer:copy

#nsCaRevocationUrl		= http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

# 这对于代理证书来说是必须的。
proxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

####################################################################
[ tsa ]

default_tsa = tsa_config1	# 默认的 TSA 配置部分

[ tsa_config1 ]

# 这些仅用于 TSA 回复生成。
dir		= ./demoCA		# TSA 根目录
serial		= $dir/tsaserial	# 当前的序列号（强制项）
crypto_device	= builtin		# 用于签名的 OpenSSL 引擎
signer_cert	= $dir/tsacert.pem 	# TSA 签名证书
					# （可选）
certs		= $dir/cacert.pem	# 证书链以包含在回复中
					# （可选）
signer_key	= $dir/private/tsakey.pem # TSA 私钥（可选）
signer_digest  = sha256			# 使用的签名哈希算法（可选）
default_policy	= tsa_policy1		# 如果请求未指定，使用的默认策略
					# （可选）
other_policies	= tsa_policy2, tsa_policy3	# 可接受的策略（可选）
digests     = sha1, sha256, sha384, sha512  # 可接受的消息摘要（强制项）
accuracy	= secs:1, millisecs:500, microsecs:100	# （可选）
clock_precision_digits  = 0	# 小数点后数字的位数。 （可选）
ordering		= yes	# 是否定义时间戳的顺序？
				# （可选，默认为 no）
tsa_name		= yes	# 是否必须在回复中包括 TSA 名称？
				# （可选，默认为 no）
ess_cert_id_chain	= no	# 是否必须包括 ESS 证书 ID 链？
				# （可选，默认为 no）
ess_cert_id_alg		= sha1	# 用于计算证书标识符的算法
				# （可选，默认为 sha1）

